#include <stdint.h>

#define MAX_PACKET_DATA_LENGTH (50)

typedef struct data_packet_t {
    uint8_t id;
    uint8_t data_length;
    uint8_t data[MAX_PACKET_DATA_LENGTH];
    uint16_t crc;
} data_packet_t;

// CRC-16 (CCITT) Polynomial: x^16 + x^12 + x^5 + 1 (0x1021)
uint16_t calculate_crc(const uint8_t* data, uint8_t length) {
    uint16_t crc = 0xFFFF;

    while (length--) {
        crc ^= (*data++ << 8);
        for (uint8_t i = 0; i < 8; ++i) {
            if (crc & 0x8000) {
                crc = (crc << 1) ^ 0x1021;
            } else {
                crc <<= 1;
            }
        }
    }

    return crc;
}

int is_packet_corrupted(const data_packet_t* packet) {
    uint16_t calculated_crc = calculate_crc(packet->data, packet->data_length);
    return (packet->crc != calculated_crc);
}

int main() {
    // Example usage

    // Simulate a received packet
    data_packet_t received_packet;
    received_packet.id = 1;
    received_packet.data_length = 4;
    received_packet.data[0] = 0x11;
    received_packet.data[1] = 0x22;
    received_packet.data[2] = 0x33;
    received_packet.data[3] = 0x44;
    received_packet.crc = 0x1234;

    // Check if the packet is corrupted
    if (is_packet_corrupted(&received_packet)) {
        // Packet is corrupted
        // Handle the corruption (e.g., request retransmission)
        printf("Packet is corrupted!\n");
    } else {
        // Packet is intact
        // Process the packet
        printf("Packet is intact. ID: %d\n", received_packet.id);
        printf("Data: ");
        for (uint8_t i = 0; i < received_packet.data_length; ++i) {
            printf("%02X ", received_packet.data[i]);
        }
        printf("\n");
    }

    return 0;
}